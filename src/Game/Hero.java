/*
 Version : 2.4
 파일명 : Hero.java
 작성일자 : 2019-09-21
 설명 : 캐릭터의 필요한 모든 것들
 */
package Game;

import java.io.Serializable;
import Item.Armor;
import Item.HpPotion;
import Item.Item;
import Item.MpPotion;
import Item.Weapon;
import Monster.Monster;

public class Hero implements Serializable{  //객체저장을 위해 직렬화처리 할 수 있게
	private static Hero hero; //싱글톤적용
	private int storyIndex; // 저장시 현재 스토리진행위치
	private final String hName;//캐릭터이름
	private int hLv;//캐릭터 레벨
	private int hMaxhp;//최대Hp
	private int hMaxmp;//최대Mp
	private int hHp;//현재 Hp
	private int hMp;//현재mp
	private int hAtt;//케릭터 공격력
	private int hDef;//캐릭터 방어력
	private int hExp;//캐릭터 경험치
	private int[] hLexp;//레벨업에 필요한 경험치를 담을 함수 //초기화 0918 이욱재 
	private int hPos;//캐릭터 현재위치
	private Item[] inventory;//아이템 담는 인벤토리
	private Item[] item;//장착중인 아이템
	private int[][] hLStatus;//레벨업에따른 캐릭서 Status 설정 값 0918 이욱재 추가

	//캐릭터 생성 싱글톤
	private Hero(String hName) {//생성시 1레벨
		this.hLStatus = new int[][] {{0,0,0,0},{50, 0, 15, 15},{60,50,20,20},{70,60,25,25},{80,70,30,30},{100,100,100,100}};
		this.hName = hName;
		this.hLv = 1;
		this.hMaxhp = hLStatus[1][0];
		this.hMaxmp = hLStatus[1][1]  ;
		this.hHp = this.hMaxhp;
		this.hMp = this.hMaxmp;
		this.hExp = 0;
		this.hAtt = hLStatus [1][2];
		this.hDef = hLStatus [1][3];
		this.hPos = 1;
		this.inventory = new Item[10];
		this.item = new Item[2];
		this.hLexp = new int[] {0,10,20,30,40};
	}

	//캐릭터는 하나만 있어야함 싱글톤 //함수이름 변경0919
	static Hero mkHero(String hName) {
		if( hero == null) {
			hero = new Hero(hName);
		}
		return hero;	
	}
	//불러오기 시 사용하는 싱글톤 생성 함수 (오버로딩)
	static Hero mkHero(Hero hero1) {
		hero = hero1;
		return hero;
	}

	//현재 스토리 라인 저장 함수 //0920 정하
	void storyIndex(Story story) {
		this.storyIndex = story.getStoryIndex();
	}

	//공격함수 욱재
	void hAttack(Monster monster) {
		int gap;
		int attPoint;
		if(hLv!=1){
			gap = hLStatus[this.hLv][2]-hLStatus[this.hLv-1][2];
			attPoint = (int)(Math.random()*gap) + hLStatus[this.hLv-1][2] + 1 - monster.getmDef(); //+ (Weapon)(item[0]).getwAtt;
			attPoint = item[0]==null? attPoint:attPoint+ ((Weapon)(item[0])).getwAtt();
			if(attPoint<0){
				attPoint =1;
			}


		}else{
			attPoint = (int)(Math.random()*2)+ hAtt;
		}
		System.out.println(attPoint+"의 피해를 입혔다");
		monster.setmHp(monster.getmHp()-attPoint);// -= attPoint;
	}

	//근의공식 스킬 욱재
	void cSkillOne(Monster monster) {
		int attPoint = (int)(Math.random()*hLStatus[this.hLv][2])+13;
		this.hMp-=10;
		System.out.println("     *      _______________");
		System.out.println("   *   *   {  sin²+cos²=1!!! )");
		System.out.println("     *      \\_______________/ ");
		System.out.println("  *  *  *     슈슈슈슉!!");
		System.out.println(" *   *    *");
		System.out.println("     *     ");
		System.out.println("  *  *  *  ");
		System.out.println(" *       * ");
		System.out.println(" *       * ");
		System.out.println("*********************");
		System.out.println("**"+attPoint+"의 피해를 입혔다**");
		System.out.println("*********************");
		monster.setmHp(monster.getmHp()-attPoint);
		//sin²+cos²=1
	}

	//미분적분 스킬 욱재
	void cSkillTwo(Monster monster) {
		int attPoint = (int)(Math.random()*hLStatus[this.hLv][2])+18;
		this.hMp-=15;
		System.out.println("     *      _______________");
		System.out.println("   *   *   {  ∫f(x)dx!!!!!!! )");
		System.out.println("     *      \\_______________/ ");
		System.out.println("  *  *  *     콰콰쾅!!");
		System.out.println(" *   *    *");
		System.out.println("     *     ");
		System.out.println("  *  *  *  ");
		System.out.println(" *       * ");
		System.out.println(" *       * ");
		System.out.println(attPoint+"의 피해를 입혔다");
		System.out.println("***************");
		System.out.println("**"+attPoint+"의 피해를 입혔다**");
		System.out.println("***************");
		monster.setmHp(monster.getmHp()-attPoint);
	}

	// 사용중이던 아이템 창고에 넣어주기 //0919 김정하 추가
	void hUseInventory(Item item) { 
		//int count = 0; // 창고에 아이템이 들은 방의 갯수체크
		for ( int index = 0; index < this.inventory.length ; index++) { // 창고갯수만큼 for 문 실행
			if(this.inventory[index] == null) { // 창고가 비어있으면
				this.inventory[index] = item;
				System.out.printf("%s 가방에 넣었습니다.\n",this.inventory[index].getiName());
				return;
			}
		}
	}

	//아이템사용함수 정하 0919 1523 수정
	boolean hUse(String choice) { 
		boolean ischoice = false;
		Item item = hItemDelete(choice); // 선택한 아이템을 창고에서 제거

		if( item != null ) {
			ischoice = true;
			System.out.println("─────────────────────────────────────────────\n");
			if ( item instanceof Weapon) { //사용한 아이템이 무기면 item 배열 0번방에 넣고 다운캐스팅 후 공격력 가져와서 더해주기
				Weapon newWeapon = (Weapon)item;
				if ( this.item[0] != null) {
					hUseInventory(this.item[0]); // 착용중 아이템 인벤토리로
					Weapon oldWeapon = (Weapon)this.item[0];
					this.hAtt -= oldWeapon.getwAtt();
					System.out.printf("%s 장착해제!!\n (공격력이 【%d】 감소되었습니다.)\n\n",oldWeapon.getiName(),oldWeapon.getwAtt());
				}			
				this.item[0] = item;
				this.hAtt += newWeapon.getwAtt();
				System.out.printf("%s 장착완료!!\n (공격력이 【%d】 증가되었습니다.)\n\n",newWeapon.getiName(),newWeapon.getwAtt());
			} else if (item instanceof Armor) { // 방어구면 item 배열 1번방에 넣고 다운캐스팅 후 방어력 가져와서 더해주기
				Armor newArmor = (Armor)item;
				if ( this.item[1] != null) {
					hUseInventory(this.item[1]); // 착용중 아이템 인벤토리로
					Armor oldArmor = (Armor)this.item[1];
					this.hDef -= oldArmor.getaDef();
					System.out.printf("%s 장착완료!!\n (방어력이 【%d】 감소되었습니다.)\n\n",oldArmor.getiName(),oldArmor.getaDef());
				}
				this.item[1] = item;
				this.hDef += newArmor.getaDef();
				System.out.printf("%s 장착완료!!\n (방어력이 【%d】 증가되었습니다.)\n\n",newArmor.getiName(),newArmor.getaDef());
			}else if ( item instanceof HpPotion) { //HP포션이면 회복량 가져와서 더해주기
				HpPotion hpPotion = (HpPotion)item;

				if ( (this.hHp+hpPotion.getHpRecover()) > this.hMaxhp ) { // 포션을 먹어서 증가한 HP가 최대HP 보다 크면 최대 HP까지만 표시해주기
					this.hHp = this.hMaxhp;
				} else {
					this.hHp += hpPotion.getHpRecover();
				}
				System.out.printf("%s 사용완료!!\n(HP가 【%d】 회복되었습니다.)\n",hpPotion.getiName(),hpPotion.getHpRecover());
			}else { // Mp 포션이면 회복량 가져와서 더해주기
				MpPotion mpPotion = (MpPotion)item;

				if ( (this.hMp+mpPotion.getMpRecover()) > this.hMaxmp ) { // 포션을 먹어서 증가한 MP가 최대MP 보다 크면 최대 MP까지만 표시해주기
					this.hMp = this.hMaxmp;
				} else {
					this.hMp += mpPotion.getMpRecover();
				}
				System.out.printf("%s 사용완료!!\n(MP가 【%d】 회복되었습니다.)\n",mpPotion.getiName(), mpPotion.getMpRecover());
			}
			System.out.println("─────────────────────────────────────────────");
		}
		return ischoice;
		
	}

	//레벨업함수 욱재
	void hLvUp() {
		if(hero.hExp>hLexp[hLv]) {
			System.out.println("─────────────────────────────────────────────");
			System.out.println("레벨업 하였습니다");
			System.out.println("─────────────────────────────────────────────");
			this.hLv++;
			this.hMaxhp = hLStatus[hLv][0];
			this.hHp = this.hMaxhp;
			this.hMaxmp = hLStatus[hLv][1];
			this.hMp = this.hMaxmp;
			this.hExp = 0;
			this.hAtt = hLStatus[hLv][2];
			this.hDef = hLStatus[hLv][3];

		}
	}

	//캐릭터 이동함수 정하
	void hMove() {
		hPos++;
	}

	//아이템 획득함수 정은 // 담기를 선택할 시 정은 // 0920 0937
	void hGet(Item item) { 
		int i;
		for (i = 0; i < inventory.length; i++) {// 인벤토리가 비어있다면
			if (inventory[i] == null) {
				inventory[i] =item; // 아이템을 넣어 줌
				System.out.println("─────────────────────────────────────────────");
				System.out.println("「 "+hero.hName + " 」 님은 " + item.getiName() + "을 획득했습니다.");
				System.out.println("─────────────────────────────────────────────");
				System.out.println("▷ 가방에 [" + item.getiName() + "] 추가");
				break;
			}
		}

		if (i >= inventory.length) { //인벤토리가 가득 찼다면
			System.out.println("─────────────────────────────────────────────");
			System.out.println("\t가방이 가득 차 있어 더이상 담을 수 없습니다.");
			System.out.println("\t지나간 버스는 다시 돌아오지 않습니다.다음부터는 정신 단디 차리세요.");
			System.out.println("─────────────────────────────────────────────");
		}
	}

	//캐릭터 인벤토리 조회함수 광민 완성
	boolean hInventory(){
		int count = 0;
		boolean hasSomething = true;
		System.out.println("─────────────────────────────────────────────");
		System.out.println("\t\t『  가  방  』");
		System.out.println("-------------------------------------------");
		for (int i = 0; i < this.inventory.length; i++) {
			if (this.inventory[i] != null) {
				System.out.printf("\t《(%d)》 %s\n",(i+1),this.inventory[i].getiName());
				System.out.println("-------------------------------------------");
				count++;
			}
		}
		if ( count == 0 ) {
			hasSomething = false;
			System.out.println("들어있는 아이템이 없습니다.");
		}
		System.out.println("─────────────────────────────────────────────");
		return hasSomething;
	}

	//캐릭터정보조회 함수 광민 완성
	void hStatus(){
		System.out.println("─────────────────────────────────────────────");
		System.out.println("\t현재Lv : " + this.hLv);
		System.out.println("\t현재HP : " + this.hHp +" / " + this.hMaxhp);
		System.out.println("\t현재MP : " + this.hMp +" / " + this.hMaxmp);
		System.out.println("\t현재경험치 : " + this.hExp);
		System.out.println("\t현재공격력 : " + this.hAtt);
		System.out.println("\t현재방어력 : " + this.hDef);
				
		if ( this.item[0] != null ) System.out.println("\t현재 착용중인 무기 : " + this.item[0].getiName());
		if( this.item[1] != null) System.out.println("\t현재 착용중인 방어구 : " + this.item[1].getiName());
		System.out.println("─────────────────────────────────────────────");
	}

	// 선택한 아이템을 창고에서 삭제 item return //0919 김정하 추가
	Item hItemDelete(String choice) { 
		Item item = null;
		int choiceInt = (Integer.parseInt(choice))-1;

		if ( this.inventory[choiceInt] != null ) {
			item = this.inventory[choiceInt];
			this.inventory[choiceInt] = null;
			System.out.println("가방에서 꺼냈다");
		} else {
			System.out.println("★☆★☆정신차려!!★☆★☆");
		}
		//System.out.printf("%s 아이템을 가방에서 꺼냈습니다.\n",item.getiName());
		return item;
	}

	//----------------------------------------------getter setter----------------------------------

	// mAttack() 에서 사용 //0919 이욱재
	public int gethHp() {
		return hHp;
	}

	// mAttack() 에서 사용 //0919 이욱재
	public void sethHp(int hHp) {
		this.hHp = hHp;
	}

	// mAttack() 에서 사용 //0919 이욱재
	public int gethDef() {
		return hDef;
	}

	// eHpInfo(Hero hero) 에서 사용 //0919 정은
	public String gethName() {
		return hName;
	}

	public int gethMp() {
		return hMp;
	}

	public int gethExp() {
		return hExp;
	}

	public int gethPos() {
		return hPos;
	}

	//욱재사용
	public void sethExp(int hExp) {
		this.hExp = hExp;
	}

	// 정하사용
	public int getStoryIndex() {
		return storyIndex;
	}
	
	//전투시 hpInfo함수에 사용 0921 이욱재
	public int gethMaxhp() {
		return hMaxhp;
	}
	
	//전투시 hpInfo함수에 사용 0921 이욱재
	public int gethMaxmp() {
		return hMaxmp;
	}
	

}
